openapi: 3.0.0
info:
  version: 1.0.0
  title: Back End  API
  description: A simple API.
  contact: 
    name: Wu Hong Ting
    email: 237022522@stu.vtc.edu.hk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:10889/api/v1'
    description: Development server
tags:
  - name: Users
    description: API endpoints for user management.
  - name: Petinfos
    description: Access and perform CRUD operations on blog entries.
  - name: Login
    description: login user account
      

paths:
  /userlist/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the user
    get:
      tags:
        - Users
      description:
        Get the user by id.
      responses:
        '200':
          description: user record.
          content:
            application/json:
              schema:
               type: object
               properties:              
               $ref: ./userlist.json#/definitions/User
        '404':
          description: User can not found in the Datebase.
    put:
      tags:
        - Users
      description:
        Update user by ID.
      requestBody:
        description: Modify user record
        required: true
        content:
          application/json:
            schema:
              $ref: ./userlist.json#/definitions/User
      responses:
        '200':
          description: View of an user record.
        '404':
          description: User can not found in the Datebase.
    delete:
      tags:
        - Users
      description:
        Delete user by ID.
      responses:
        '200':
          description: View of user record.
        '404':
          description: User can not found in the Datebase.

  /userlist/:
    parameters:
    - in: query
      name: limit
      schema:
        type: integer
      description: no. of  records to display with 10 records/page
    - in: query
      name: page
      schema:
        type: integer
      description: starting page no.to display
    - in: query
      name: fields
      schema:
        type: string
      description: fields to display
    - in: query
      name: q
      schema:
        type: string
      description: specifiy the search criteria  for either fields of username or email
    get:
      tags:
        - Users
      description: Get all users
      responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               type: array               
               $ref: ./userlist.json#/definitions/User
       '404':
         description: Not Found  
    post:
      tags:
       - Users
      description: Create a new user
      requestBody:
        description: A new user data
        required: true
        content:
          application/json:
            schema:
              $ref: ./userlist.json#/definitions/User
      responses:
        '201':
          description: User created
        '400':
          description: Bad request
  
  /userlist/login:
    post:
      tags:
       - Login
      description: Login user account
      requestBody:
        description: login with username and password
        required: true
        content:
          application/json:
            schema:
             type: object
             properties:
              username:
                type: string
                description: The user name.
              password:
                type: string
                description: The user password.
      responses:
        '200':
          description: user record.
          content:
            application/json:
             schema:
               type: object
               properties:   
                 id:
                   type: integer
                   description: The id of user. 
                 username:
                   type: string
                   description: The user name.
                 email:
                   type: string
                   description: The user email.
                 role:
                   type: string
                   description: The user role.  
                 links:
                   type: uri
                   description: The  link to user info by id.

        '404':
          description: User was not found in the DB.
        
  /petinfos/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the pet info
    get:
      tags:
        - petinfo
      description:
        Get petinfo by id.
      responses:
        '200':
          description: View of an pet record.
        '404':
          description: The pet record was not found in the DB.
    put:
      tags:
        - petinfo
      description:
        Update petinfo by ID.
      requestBody:
        description: A new pet information data
        required: true
        content:
          application/json:
            schema:
              $ref: ./petinfo.json#/definitions/petinfo     
      responses:
        '200':
          description: View of an petinfo record.
        '404':
          description:  The pet record was not found in the DB.
    delete:
      tags:
        - petinfo
      description:
        Delete petinfo by ID.
      responses:
        '200':
          description: View of an petinfo record.
        '404':
          description: The pet record was not found in the DB.

  /petinfos/: 
    get:
      tags:
      - petinfo
      description: Get all petinfos
      responses:
        '200':
          description: petinfos record.
          content:
            application/json:
             schema:
               type: object 
               properties:   
                 id:
                   type: integer
                   description: The id of petinfos. 
                 petname:
                   type: string
                   description: The petname of the pet.
                 petsummary:
                   type: string
                   description: summary of petinfos.
                 imageurl:
                   type: string
                   description: The link to image of petinfos.  
                 authorid:
                   type: integer 
                   description: The id of author.  
                 links:
                   type: uri array object
                   description: include four links to likes,fav,msg and self with petinfoid respectively eg.petinfoid=1 {"fav":"https://xxx:3000/api/v1/petinfos/1/fav"},{"msg":"https://xxx:3000/api/v1/petinfos/1/msg"},{"self":"https:xxx:3000/api/v1/petinfos/1"}]
          '404':
            description: Not Found  
    post:
      tags:
       - petinfo
      description: Create a new petinfo
      requestBody:
        description: A new pet information data
        required: true
        content:
          application/json:
            schema:
              $ref: ./petinfo.json#/definitions/petinfo
      responses:
        '201':
          description: petinfo created
        '400':
          description: Bad request